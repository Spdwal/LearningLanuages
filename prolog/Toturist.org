* Introduction

** Facts
+ The names of all relationships and objects must begin with a lower-case letter.
+ The relations is written first, and the objets are written separated by commas, and the objects a encolosed by a pair of round brackets.
+ The dot character '.' must come at the end of a fact. The dot is what some people also call a "period" or a "full stop".

We use facts to define relationships between objects.
For example: likes(john, mary). is not equal to likes(mary, john).
The first is John likes Mary and the second is Mary likes John.
Each time a name is used, the name refers to a particular individual object.
The names of the objects that are enclosed within the round brackets in each fact are called the *arguments*.
The names of the relationship is called predicate.
Realtionships can have arbitrary number of arguements, just like:
#+BEGIN_SRC prolog
play(john, mary, football).
play(jane, jim, badminton).
#+END_SRC
We can also declare facts that are not true in read world.
In prolog, a collection of cates is called a _database_.

** Questions
Once we have some facts, we can ask some *questions* about them.
The special symbol is written as a question mark followed by a hyphen, just like this:
#+BEGIN_EXAMPLE prolog
?- owns(mary, book).
#+END_EXAMPLE
This question is asking /Does Mary own/ /the book/, or /Is it a fact that Mary owns the book?/.
When a question is asked of a Prolog system, it will search through the database.
If prolog find a fact that unifies with the question, Prolog will respond yes. If no such fact exists in the database. Prolog will respond no
The ansuer no is used to mean /nothing unifies with the question/.
No is not the same as /false/.
** Variables
In prolog we can not only name particular objects, but also can use terms like X to stand for objects that we can unwilling or unable to name.
Terms of this second kind are called /variables/.
When Prolog used a variable, the vairable can be either /instaniated/ or /not instantiated./
When prolog is asked a question containing a variable, Prolog searches through all its facts to find an object that the variable could stand for.
#+BEGIN_SRC prolog
likes(john, flowers).
likes(john, mary).
likes(paul, mary).

?- likes(john, X).
#+END_SRC

#+RESULTS:
: X = flowers
How does this work? When prolog is adked this question, the variable X is initially not instantiated. Prolog searches through the database, looking for a fact that unifies with the question.
Now if an uninstantiated variable Prolog will allow that argument to unify with any other argument in the same position in the fact.
We say that X is instantiated to flowers. Prolog not marks the place in the database where a unifier is found.
Now if we press Enter key, meaning we are satisifed with just one answer, then Prolog will stop searching for more.If instead we press the semicolon key ";", Prolog will resume its search through the database as before.
starting from where it /left the place-marker/, to find another possible answer to the question.
When prolog begins searching from a place-marker instead of from the beginning of the database, we say that prolog is attempting to re-satisfy yhe question.
** Conjunctions
The and expresses the idea that we are interested in the conjunction of two goals: we want to satisfiy them both one after the other.
We represent this by putting a comma between the goals.
#+BEGIN_SRC prolog
?- likes(john, mary), likes(mary, john).
#+END_SRC
The comma is pronounced "and", and it serves to separate any number of different goals that have to be satisfied in order to answer a question.
When a sequence of goals is given to prolog, prolog attempts to satisfy each goal in turn by searching for a unifying goal in database. All goals have to be satisfied in order for the sequence to be satisfied.
When a goal fail, we must to re-satisfy the previous goal. When we re-satisfy the previous goal successfully, Prolog is not trying to re-satisfy the current goal, bot entering the goal again.
Since this goal was satisfied, prolog also marks its place in the database, in case we want to re-satisfy the goal.
There is a place-marker in the database for each goal that Prlog is attempting to satisfy.
As each goal in turn becomes satisfied, it leaves behind a place-markder in the database. in case that the goal needs to be re-satisfied at a later time.
Any time a goal fails, Prolog goes back and attempts to satisfy its left-hand neighbour, starting from its place-markder.
If the first goal fails, then it does not have a lefthand neighbour it can attempt to re-satisfy. In this case, the entire conjunction fails.
Where Prolog repeatedly attempts to satisfy and re-satisfy goals in a conjunction, is called /backtracking/.
