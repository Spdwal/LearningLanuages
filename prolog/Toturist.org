* Introduction

** Facts
+ The names of all relationships and objects must begin with a lower-case letter.
+ The relations is written first, and the objets are written separated by commas, and the objects a encolosed by a pair of round brackets.
+ The dot character '.' must come at the end of a fact. The dot is what some people also call a "period" or a "full stop".

We use facts to define relationships between objects.
For example: likes(john, mary). is not equal to likes(mary, john).
The first is John likes Mary and the second is Mary likes John.
Each time a name is used, the name refers to a particular individual object.
The names of the objects that are enclosed within the round brackets in each fact are called the *arguments*.
The names of the relationship is called predicate.
Realtionships can have arbitrary number of arguements, just like:
#+BEGIN_SRC prolog
play(john, mary, football).
play(jane, jim, badminton).
#+END_SRC
We can also declare facts that are not true in read world.
In prolog, a collection of cates is called a _database_.

** Questions
Once we have some facts, we can ask some *questions* about them.
The special symbol is written as a question mark followed by a hyphen, just like this:
#+BEGIN_EXAMPLE prolog
?- owns(mary, book).
#+END_EXAMPLE
This question is asking /Does Mary own/ /the book/, or /Is it a fact that Mary owns the book?/.
When a question is asked of a Prolog system, it will search through the database.
If prolog find a fact that unifies with the question, Prolog will respond yes. If no such fact exists in the database. Prolog will respond no
The ansuer no is used to mean /nothing unifies with the question/.
No is not the same as /false/.
** Variables
In prolog we can not only name particular objects, but also can use terms like X to stand for objects that we can unwilling or unable to name.
Terms of this second kind are called /variables/.
When Prolog used a variable, the vairable can be either /instaniated/ or /not instantiated./
When prolog is asked a question containing a variable, Prolog searches through all its facts to find an object that the variable could stand for.
#+BEGIN_SRC prolog
likes(john, flowers).
likes(john, mary).
likes(paul, mary).

?- likes(john, X).
#+END_SRC

#+RESULTS:
: X = flowers
How does this work? When prolog is adked this question, the variable X is initially not instantiated. Prolog searches through the database, looking for a fact that unifies with the question.
Now if an uninstantiated variable Prolog will allow that argument to unify with any other argument in the same position in the fact.
We say that X is instantiated to flowers. Prolog not marks the place in the database where a unifier is found.
Now if we press Enter key, meaning we are satisifed with just one answer, then Prolog will stop searching for more.If instead we press the semicolon key ";", Prolog will resume its search through the database as before.
starting from where it /left the place-marker/, to find another possible answer to the question.
When prolog begins searching from a place-marker instead of from the beginning of the database, we say that prolog is attempting to re-satisfy yhe question.
** Conjunctions
The and expresses the idea that we are interested in the conjunction of two goals: we want to satisfiy them both one after the other.
We represent this by putting a comma between the goals.
#+BEGIN_SRC prolog
?- likes(john, mary), likes(mary, john).
#+END_SRC
The comma is pronounced "and", and it serves to separate any number of different goals that have to be satisfied in order to answer a question.
When a sequence of goals is given to prolog, prolog attempts to satisfy each goal in turn by searching for a unifying goal in database. All goals have to be satisfied in order for the sequence to be satisfied.
When a goal fail, we must to re-satisfy the previous goal. When we re-satisfy the previous goal successfully, Prolog is not trying to re-satisfy the current goal, bot entering the goal again.
Since this goal was satisfied, prolog also marks its place in the database, in case we want to re-satisfy the goal.
There is a place-marker in the database for each goal that Prlog is attempting to satisfy.
As each goal in turn becomes satisfied, it leaves behind a place-markder in the database. in case that the goal needs to be re-satisfied at a later time.
Any time a goal fails, Prolog goes back and attempts to satisfy its left-hand neighbour, starting from its place-markder.
If the first goal fails, then it does not have a lefthand neighbour it can attempt to re-satisfy. In this case, the entire conjunction fails.
Where Prolog repeatedly attempts to satisfy and re-satisfy goals in a conjunction, is called /backtracking/.
** Rules
Rules are used when you want to say that a fact depends on a group of other facts. In English, we use the word "if" to express a rule.
#+BEGIN_EXAMPLE
I used an umbrella if there is rain.
John buys the wine if it is less expensive then the beer.
#+END_EXAMPLE
Or:
#+BEGIN_EXAMPLE
X is a bird if:
      X is an aninaml, and
      X has fathers.
#+END_EXAMPLE
A rule is a general statement about objects and their relationships.
In Prolog a rule consists of a head and a body. The head and body are connected by the symbol ":-".
The ":-" is pronounced if.
Notice that rules also end with a dot.
#+BEGIN_SRC prolog
/*John likes anyone who likes wine and food*/
likes(john, X) :- likes(X, wine), likes(X, food).
#+END_SRC
Whenever we look at a Prolog rule, we should take notice of where the variables are.
In the above rule, the vaiable X is used three times. WHenever X becomes instantiated to some object, all X's instantiated /within the scope of X/.
There are two ways to provide information about a given predicate such as likes. We provide both facts and rules.
In general a predicate is defined by a mixture of afcts and rules.THese are called the /clauses/ for a predicate. We'll use the word /clause/ whenever we refer to either a fact or a rule.
The comment si something enclosed between /'//*...*/'/ brackets. Comments are ignored by Prolog.
* A Closer Look
** Syntax
Prolog programs are built from terms. A term is either a *constant*, a *variable* or a *structure*. Each term is written as a sequence of characters.
*** Constants
Contants name specific objects or specific relationships. There are two kinds of constants: atoms, and numbers.
There are two kinds of atoms: those made up of letters and digits, and those made up from signs.
The first kind musht normally begin with a lower-case letter.
Those atoms made from signs normally are made up from signs only. Sometimes it may be necessary to have an atom beginning with a capital letter or a digit.
If an atom is enclosed in single quotes "'", then the atom may have any characters in its name. The underline character "_" may be insert in the middle of an atom to improve legibility.
Numbers are the other kind of constant. The "e" notation is used to denote a power of 10.
*** Variables
Variables look like atoms, except they have names beginning with a capital letter or an underline sign "_".
A variable should be thought of as standing for some object that we are unable or unwilling to name at the time we writer the program.
Sometimes one needs to use a variable, but its name will never be used, we can use the /anonymous/ /variable/. For example:
#+BEGIN_SRC prolog
?- likes(_, john).
#+END_SRC
Several anonymous variables in the same clause need not be giben consistent interpretations.
*** Structures
Structures are called "compound terms" in Standard Prolog.
A structure is a single object consisiting of a collection of other objects, called components. The components are grouped together into a single structure for convenience in handling them.
Structures help to organise the data in a program because they permit a group of related information to be treated as a single object instead of as separate entities.
A structure is written in Prolog by specifying its functor and its components.
The functor names the general kind of structure, and corresponds to datatype in an ordinary programming language. The commponents are enclosed in round brackets and separated by commas.
Consider the following fact, that John owns the book called /Wuthering/ /Heights/, by Emily Bronte:
#+BEGIN_SRC prolog
owns(john, book(wuthering_heights, emily_bronte)).
#+END_SRC
If we like, we can also have another structure for the author's name.
#+BEGIN_SRC prolog
owns(john, book(wuthering_heights, author(emily, bronte))).
#+END_SRC
Sturctures may participate in the process of question-answering using variables.
#+BEGIN_SRC prolog
?- owns(john, book(X, author(Y, bronte))).
#+END_SRC
** Characters
The names of constants and variables are built up from strings of characters.
Prolog recognises two kinds of characters: printing characters and not-printing characters.
Printing characters cause a symbol to appear on our computer terminal's display.
Non-printing characters do not cause a symbol to appear, but cause an action to be carried out.
** Operators
Sometimes it is convenient to write some functors as operators. This is a form of syntax that makes some structures easier to read.
If we had to write the arithmetic expression "x + y * z" in the normal way for structures, it would look like this: +(x, *(y, z)), and it would be a legal Prolog term.
It is important to note that the operators do not "cause" any arithmetic to be carried out.
The term 3 + 4 is another way to write the term +(3, 4), which is a data sturcture.
To know how to read arithmetic expressions that have operators in them, we need to know three things about each operator: its /position/, its /precedence/. and its /associativity./
Operators like plus, hyphen, asterisk and slash are written between their arguments, so we call then *infix* operators.It is also possible to put operators before their arguments. as in "-x + y".
Operators that come before their arguments are called *prefix* operators. Finally some operators may come after their arguments. For example, the factorial operator,
Operators that are written after their arguments are called *postfix* operator.
The precedence of an operator is used to indicate which operation is carried out first. Each operator that is used in Prolog has a /precedence/ class associated with it.
The precedence class is an integer that is associated with an operator.
We must be able to tell whether an operator is left associative or right associative.
In practice, people tend to use round bracktes for expressions that may be difficult to understand because of the precedence and associativity rules.
** Equality and Unification
#+BEGIN_SRC prolog
?- X = Y.
#+END_SRC
Prolog attempts to make X and Y equal. The equality predicate is built-in.
The following question succeeds causing X to be instantiated to the structure rides(student, bicycle).
#+BEGIN_SRC prolog
?- rides(student, bicycle) = X.
#+END_SRC
Integers and atoms are alwats equal to themselves.
Two structures are equal if they have the same functor and number of components, and all the corresponding components are equal.
Sturcture can be nested one inside antoher to any depth.
The following goal
#+BEGIN_SRC  prolog
a(b, C, d(e, F, g(h, i, J))) = a(B, c d(E, f, g(H, i, j))).
#+END_SRC
would succeed and causes B to be instantiated to B, C to c, E to e, F to f, H to h.and J to j. The goal succees and the two variables share.
If two variables share, then whenever one of them becomes instantiated to some term, the other one automatically is instantiated to the same term.
** Arithmetic
